import typing as t
import numpy as np
import funcy as fn

from .base import CharEnc

_mats = np.array([
    [[0, 0], [0, 0], [0, 0]],
    [[0, 1], [1, 0], [1, 1]],
    [[0, 0], [0, 1], [0, 0]],
    [[0, 1], [0, 1], [1, 1]],
    [[1, 1], [1, 0], [0, 1]],
    [[1, 1], [0, 0], [0, 1]],
    [[1, 1], [1, 0], [1, 1]],
    [[0, 0], [0, 0], [1, 0]],
    [[1, 0], [1, 1], [1, 1]],
    [[0, 1], [1, 1], [1, 1]],
    [[1, 0], [0, 0], [0, 1]],
    [[0, 1], [0, 0], [1, 1]],
    [[0, 0], [0, 0], [0, 1]],
    [[0, 0], [0, 0], [1, 1]],
    [[0, 1], [0, 0], [0, 1]],
    [[0, 1], [0, 0], [1, 0]],
    [[0, 0], [0, 1], [1, 1]],
    [[0, 0], [1, 0], [0, 0]],
    [[0, 0], [1, 0], [1, 0]],
    [[0, 0], [1, 1], [0, 0]],
    [[0, 0], [1, 1], [0, 1]],
    [[0, 0], [1, 0], [0, 1]],
    [[0, 0], [1, 1], [1, 0]],
    [[0, 0], [1, 1], [1, 1]],
    [[0, 0], [1, 0], [1, 1]],
    [[0, 0], [0, 1], [1, 0]],
    [[1, 0], [0, 1], [0, 1]],
    [[0, 0], [0, 1], [0, 1]],
    [[1, 0], [1, 0], [0, 1]],
    [[1, 1], [1, 1], [1, 1]],
    [[0, 1], [0, 1], [1, 0]],
    [[1, 1], [0, 1], [0, 1]],
    [[0, 1], [0, 0], [0, 0]],
    [[1, 0], [0, 0], [0, 0]],
    [[1, 0], [1, 0], [0, 0]],
    [[1, 1], [0, 0], [0, 0]],
    [[1, 1], [0, 1], [0, 0]],
    [[1, 0], [0, 1], [0, 0]],
    [[1, 1], [1, 0], [0, 0]],
    [[1, 1], [1, 1], [0, 0]],
    [[1, 0], [1, 1], [0, 0]],
    [[0, 1], [1, 0], [0, 0]],
    [[0, 1], [1, 1], [0, 0]],
    [[1, 0], [0, 0], [1, 0]],
    [[1, 0], [1, 0], [1, 0]],
    [[1, 1], [0, 0], [1, 0]],
    [[1, 1], [0, 1], [1, 0]],
    [[1, 0], [0, 1], [1, 0]],
    [[1, 1], [1, 0], [1, 0]],
    [[1, 1], [1, 1], [1, 0]],
    [[1, 0], [1, 1], [1, 0]],
    [[0, 1], [1, 0], [1, 0]],
    [[0, 1], [1, 1], [1, 0]],
    [[1, 0], [0, 0], [1, 1]],
    [[1, 0], [1, 0], [1, 1]],
    [[0, 1], [1, 1], [0, 1]],
    [[1, 1], [0, 0], [1, 1]],
    [[1, 1], [0, 1], [1, 1]],
    [[1, 0], [0, 1], [1, 1]],
    [[0, 1], [1, 0], [0, 1]],
    [[1, 0], [1, 1], [0, 1]],
    [[1, 1], [1, 1], [0, 1]],
    [[0, 1], [0, 1], [0, 0]],
    [[0, 1], [0, 1], [0, 1]]
])
_c = ' !"#$%&�()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\]^_'
_d = dict(zip(_c, _mats))
_rev = {x.astype(bool).tobytes(): c for x, c in zip(_mats, _c)}


class Braille(CharEnc):
    lookup = (" A1B'K2L@CIF/MSP\"E3H9O6R^DJG>NTQ,"
              "*5<-U8V.%[$+X!&;:4\\0Z7(_?W]#Y)=")


    @staticmethod
    def enc1(c: str) -> str:
        s = Braille.lookup
        c = c.upper()
        return chr(0x2800 + s.index(c)) if c in s else '?'

    @staticmethod
    def dec1(c: str) -> str:
        s = Braille.lookup
        return s[ord(c) - 0x2800] if 0x2800 <= ord(c) < 0x2840 else '?'

    @staticmethod
    def as_mats(text: str) -> t.List[np.ndarray]:
        return [_d.get(c, _d[' ']) for c in text.lower()]

    @staticmethod
    @fn.joining('')
    def from_mats(*mats: np.ndarray) -> str:
        m = np.hstack(mats)
        h, w = m.shape
        for r in range(h // 3):
            for c in range(w // 2):
                x = m[r*3:r*3+3, c*2:c*2+2]
                yield _rev.get(x.astype(bool).tobytes(), '�')

braille = Braille()
